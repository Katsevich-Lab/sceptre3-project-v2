n_trt_cells <- sapply(sceptre_object@grna_assignments$indiv_nt_grna_idxs, length)
n_cells <- ncol(response_matrix)
n_cntrl_cells <- n_cells - n_trt_cells
sample_size_df <- data.frame(grna_target = names(n_trt_cells),
n = n_trt_cells,
m = n_cntrl_cells)
rownames(gene_count_df) <- rownames(sample_size_df) <- NULL
calib_res <- left_join(x = left_join(x = calib_res,
y = gene_count_df,
by = "response_id"),
y = sample_size_df,
by = "grna_target")
pilot_p_left <- gamma_left(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
calib_res$pilot_p_left <- pilot_p_left
calib_res$pass_qc_left <- pilot_p_left < 0.005
p <- ggplot(data = calib_res, mapping = aes(x = n, y = t, col = pass_qc_left)) +
geom_point() +
theme_bw() +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
p
plot_run_calibration_check(sceptre_object)
plot_run_calibration_check(sceptre_object)
my_bin <- function(x, n_bins) {
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
cut(x, breaks = quantiles, include.lowest = TRUE)
}
revlog_trans <- sceptre:::revlog_trans
calib_res <- calib_res |>
mutate(eff_ss = my_bin(pilot_p_left, n_bins = 2))
n_min <- calib_res$eff_ss |> table() |> min()
calib_res <- calib_res |> group_by(eff_ss) |> sample_n(n_min)
calib_res
calib_res |> head()
calib_res |> head()
calib_res
calib_res <- calib_res |> mutate(mu_0 = (t * n)/(m + n))
head(calib_res)
calib_res$mu_0 |> head()
calib_res$mu_0 |> hist()
calib_res$mu_0 |> log() |> hist()
calib_res
calib_res
head(calib_res)
tail(calib_res)
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = bin(mu_0))
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = bin(mu_0))
my_bin <- function(x, n_bins) {
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
cut(x, breaks = quantiles, include.lowest = TRUE)
}
revlog_trans <- sceptre:::revlog_trans
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = my_bin(mu_0))
crevlog_trans <- sceptre:::revlog_trans
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = my_bin(mu_0, 3))
my_bin <- function(x, n_bins) {
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
cut(x, breaks = quantiles, include.lowest = TRUE)
}
revlog_trans <- sceptre:::revlog_trans
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = my_bin(mu_0, 3))
calib_res
calib_res$eff_ss_bin |> table()
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = my_bin(mu_0, 2))
calib_res$eff_ss_bin |> table()
x <- calib_res$mu_0
head(x)
n_bins
n_bins <- 3
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
quantiles
cut(x, breaks = quantiles, include.lowest = TRUE)
my_bin <- function(x, n_bins) {
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
cut(x, breaks = quantiles, include.lowest = TRUE)
}
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = my_bin(mu_0, n_bins = 2))
calib_res$eff_ss_bin |> table()
calib_res
head(calib_res$mu_0)
hist(log(calib_res$mu_0))
calib_res |>
mutate(mu_0 = (t * n)/(m + n),
eff_ss_bin = my_bin(mu_0, n_bins = 2))
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n)) |>
mutate(eff_ss_bin = my_bin(mu_0, n_bins = 2))
calib_res$eff_ss_bin |> table()
my_bin(calib_res$mu_0, 2) |> table()
my_bin(calib_res$mu_0, 3) |> table()
my_bin <- function(x, n_bins) {
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
cut(x, breaks = quantiles, include.lowest = TRUE)
}
calib_res <- calib_res |>
mutate(mu_0 = (t * n)/(m + n)) |>
mutate(eff_ss_bin = my_bin(mu_0, n_bins = 3))
calib_res$eff_ss_bin |> table()
calib_res
head(calib_res)
calib_res$eff_ss
calib_res$eff_ss <- NULL
calib_res$eff_ss_bin
calib_res$eff_ss_bin |> table()
calib_res |>
mutate(mu_0 = (t * n)/(m + n))
my_bin <- function(x, n_bins) {
quantiles <- quantile(x = x, probs = seq(0, 1, 1/n_bins))
cut(x, breaks = quantiles, include.lowest = TRUE)
}
calib_res_2 <- calib_res |>
mutate(mu_0 = (t * n)/(m + n)) |>
mutate(eff_ss_bin = my_bin(mu_0, n_bins = 3))
calib_res_2$eff_ss_bin |> table()
calib_res_binned <- calib_res |>
mutate(mu_0 = (t * n)/(m + n)) |>
mutate(eff_ss_bin = my_bin(mu_0, n_bins = 3))
calib_res_binnedcalib_res_binned
calib_res_binned
calib_res_binned$eff_ss_bin
calib_res_binned
calib_res_binned |>
group_by(eff_ss_bin)
eff_ss_bin
calib_res_binned |>
group_by(eff_ss_bin) |>
mutate(n_pairs_in_bin = n()) |>
ungroup()
x <- calib_res_binned |>
group_by(eff_ss_bin) |>
mutate(n_pairs_in_bin = n()) |>
ungroup()
x$n_pairs_in_bin |> table()
calib_res_binned
calib_res_binned$eff_ss_bin
df <- calib_res_binned
table(df$eff_ss_bin)
min(table(df$eff_ss_bin))
n_to_sample <- min(table(df$eff_ss_bin))
df |>
group_by(eff_ss_bin) |>
sample_n(n_to_sample)
calib_res_binned <- calib_res |>
mutate(mu_0 = (t * n)/(m + n)) |>
mutate(eff_ss_bin = my_bin(mu_0, n_bins = 3)) |>
downsample_df()
downsample_df <- function(df) {
n_to_sample <- min(table(df$eff_ss_bin))
df |>
group_by(eff_ss_bin) |>
sample_n(n_to_sample)
}
calib_res_binned <- calib_res |>
mutate(mu_0 = (t * n)/(m + n)) |>
mutate(eff_ss_bin = my_bin(mu_0, n_bins = 3)) |>
downsample_df()
calib_res_binned
calib_res_binned |> nrow()
p <- ggplot(data = calib_res,
mapping = aes(y = p_value, col = eff_ss)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
p <- ggplot(data = calib_res_binned,
mapping = aes(y = p_value, col = eff_ss_bin)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
calib_res_binned |>
filter(n_nonzero_trt >= 30 & n_nonzero_cntrl >= 30) |>
downsample_df()
calib_res_binned_filtered <- calib_res_binned |>
filter(n_nonzero_trt >= 15 & n_nonzero_cntrl >= 15) |>
downsample_df()
calib_res_binned
calib_res_binned_filtered
p <- ggplot(data = calib_res_binned_filtered,
mapping = aes(y = p_value, col = eff_ss_bin)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
p <- ggplot(data = calib_res_binned_filtered,
mapping = aes(y = p_value, col = eff_ss_bin)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
p <- ggplot(data = calib_res_binned,
mapping = aes(y = p_value, col = eff_ss_bin)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
p <- ggplot(data = calib_res_binned_filtered,
mapping = aes(y = p_value, col = eff_ss_bin)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
calib_res_binned_filtered$p_value
calib_res_binned_filtered$p_value
calib_res_binned_filtered
calib_res_binned_filtered |> filter(eff_ss_bin == "[1.15, 51.5]")
calib_res_binned_filtered |> filter(eff_ss_bin == "[1.15,51.5]")
calib_res_binned_filtered |> filter(eff_ss_bin == "[1.15,51.5]") |> pull(p_value) |> hist()
p <- ggplot(data = calib_res, mapping = aes(x = n, y = t, col = pass_qc_left)) +
geom_point() +
theme_bw() +
scale_x_continuous(trans = rev()) +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
p <- ggplot(data = calib_res, mapping = aes(x = n, y = t, col = pass_qc_left)) +
geom_point() +
theme_bw() +
scale_x_continuous(trans = rev) +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
p <- ggplot(data = calib_res, mapping = aes(x = n, y = t, col = pass_qc_left)) +
geom_point() +
theme_bw() +
scale_x_continuous(trans = revlog_trans()) +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
p
revlog_trans()
p <- ggplot(data = calib_res, mapping = aes(x = n, y = t, col = pass_qc_left)) +
geom_point() +
theme_bw() +
scale_x_continuous(limits = rev) +
scale_y_continuous(limits = rev) +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
p <- ggplot(data = calib_res_binned,
mapping = aes(y = p_value, col = eff_ss_bin)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
theme_bw()
p
pilot_p_right <- gamma_right(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
pilot_p_left <- gamma_left(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
pilot_p_right <- gamma_right(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
calib_res$pilot_p_left <- pilot_p_left
calib_res$pass_qc_left <- pilot_p_left < 0.005
calib_res$pilot_p_right <- pilot_p_left
calib_res$pass_qc_right <- pilot_p_left < 0.005
pilot_p_left
pilot_p_right
pilot_p_left
pass_qc_left
to_plot <- calib_res |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc")
calib_res <- get_result(sceptre_object, "run_calibration_check")
# compute the new pairwise QC for each pair
n_trt_cells <- sapply(sceptre_object@grna_assignments$indiv_nt_grna_idxs, length)
n_cells <- ncol(response_matrix)
n_cntrl_cells <- n_cells - n_trt_cells
# 7. perform join operation
sample_size_df <- data.frame(grna_target = names(n_trt_cells),
n = n_trt_cells,
m = n_cntrl_cells)
rownames(gene_count_df) <- rownames(sample_size_df) <- NULL
calib_res <- left_join(x = left_join(x = calib_res,
y = gene_count_df,
by = "response_id"),
y = sample_size_df,
by = "grna_target")
pilot_p_left <- gamma_left(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
pilot_p_right <- gamma_right(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
calib_res$pilot_p_left <- pilot_p_left
calib_res$pass_qc_left <- pilot_p_left < 0.005
calib_res$pilot_p_right <- pilot_p_left
calib_res$pass_qc_right <- pilot_p_left < 0.005
to_plot <- calib_res |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc")
calib_res
to_plot <- calib_res |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc")
calib_res
to_plot <- calib_res |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc_pois")
to_plot
p <- ggplot(data = to_plot, mapping = aes(x = n, y = t, col = pass_qc_pois)) +
facet_grid(. ~ side) +
geom_point() +
theme_bw() +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
plot(p)
p
calib_res$pilot_p_left <- pilot_p_left
calib_res$pass_qc_left <- pilot_p_left < 0.005
calib_res$pilot_p_right <- pilot_p_right
calib_res$pass_qc_right <- pilot_p_right < 0.005
to_plot <- calib_res |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc_pois")
p <- ggplot(data = to_plot, mapping = aes(x = n, y = t, col = pass_qc_pois)) +
facet_grid(. ~ side) +
geom_point() +
theme_bw() +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
plot(p)
calib_res <- left_join(x = left_join(x = calib_res,
y = gene_count_df,
by = "response_id"),
y = sample_size_df,
by = "grna_target")
pilot_p_left <- gamma_left(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
pilot_p_right <- gamma_right(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
calib_res$pilot_p_left <- pilot_p_left
library(tidyverse, quietly = TRUE, warn.conflicts = FALSE)
conflicted::conflicts_prefer(dplyr::filter)
library(sceptre, quietly = TRUE)
library(sceptredata, quietly = TRUE)
library(katlabutils)
# 1. import data
directories <- paste0(system.file("extdata", package = "sceptredata"),
"/highmoi_example/gem_group_", 1:2)
data(grna_target_data_frame_highmoi)
sceptre_object <- import_data_from_cellranger(directories = directories,
moi = "high",
grna_target_data_frame = grna_target_data_frame_highmoi
)
print(sceptre_object)
# 2. set the analysis parameters, including the discovery pairs
discovery_pairs <- construct_trans_pairs(sceptre_object)
sceptre_object <- set_analysis_parameters(
sceptre_object = sceptre_object,
discovery_pairs = discovery_pairs,
resampling_mechanism = "permutations",
side = "right"
)
# 3. assign grnas
sceptre_object <- sceptre_object |>
assign_grnas(parallel = TRUE, n_processors = 8)
# 4. run qc
sceptre_object <- sceptre_object |>
run_qc(p_mito_threshold = 0.075,
n_nonzero_trt_thresh = 1,
n_nonzero_cntrl_thresh = 1)
# 5. get the response matrix; compute the expression of the gene across cells
response_matrix <- get_response_matrix(sceptre_object)[,sceptre_object@cells_in_use]
genewise_umi_counts <- Matrix::rowSums(response_matrix)
# 6. get the number of trt, cntrl cells for each grna group
n_trt_cells <- sapply(sceptre_object@grna_assignments$grna_group_idxs, length)
n_cells <- ncol(response_matrix)
n_cntrl_cells <- n_cells - n_trt_cells
# 7. perform join operation
gene_count_df <- data.frame(t = genewise_umi_counts,
response_id = names(genewise_umi_counts))
sample_size_df <- data.frame(grna_target = names(n_trt_cells),
n = n_trt_cells,
m = n_cntrl_cells)
rownames(gene_count_df) <- rownames(sample_size_df) <- NULL
discovery_pairs <- sceptre_object@discovery_pairs_with_info |>
rename(grna_target = grna_group, pass_qc_simple = pass_qc)
discovery_pairs_updated <- left_join(x = left_join(x = discovery_pairs,
y = gene_count_df,
by = "response_id"),
y = sample_size_df,
by = "grna_target")
# 8. compute the left-tailed and right-tailed p-value for each pair
# we assume a fold change of 1/4 for the left tail and 4 for the right tail
gamma_left <- Vectorize(function(n, m, t, L) {
x <- (n * t / (m / L + n) - (n * t)/(m + n))/(sqrt(t * m * n)/(m + n))
pnorm(x)
})
gamma_right <- Vectorize(function(n, m, t, L) {
x <- (n * t / (m / L + n) - (n * t)/(m + n))/(sqrt(t * m * n)/(m + n))
pnorm(x, lower.tail = FALSE)
})
L_left <- 1/2
L_right <- 2
p_left <- gamma_left(n = discovery_pairs_updated$n,
m = discovery_pairs_updated$m,
t = discovery_pairs_updated$t, L = L_left)
p_right <- gamma_right(n = discovery_pairs_updated$n,
m = discovery_pairs_updated$m,
t = discovery_pairs_updated$t, L = L_right)
discovery_pairs_updated$pass_qc_left <- p_left < 0.005
discovery_pairs_updated$pass_qc_right <- p_right < 0.005
to_plot <- discovery_pairs_updated |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc")
# make a plot similar to Gene's, plotting number of treatment cells against gene expression
p <- ggplot(data = to_plot, mapping = aes(x = n, y = t, col = pass_qc)) +
facet_grid(. ~ side) +
geom_point() +
theme_bw() +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
plot(p)
sceptre_object <- invisible(run_calibration_check(sceptre_object = sceptre_object,
n_calibration_pairs = 20000,
calibration_group_size = 1,
parallel = TRUE,
n_processors = 4))
calib_res <- get_result(sceptre_object, "run_calibration_check")
n_trt_cells <- sapply(sceptre_object@grna_assignments$indiv_nt_grna_idxs, length)
n_cells <- ncol(response_matrix)
n_cntrl_cells <- n_cells - n_trt_cells
sample_size_df <- data.frame(grna_target = names(n_trt_cells),
n = n_trt_cells,
m = n_cntrl_cells)
rownames(gene_count_df) <- rownames(sample_size_df) <- NULL
calib_res <- left_join(x = left_join(x = calib_res,
y = gene_count_df,
by = "response_id"),
y = sample_size_df,
by = "grna_target")
pilot_p_left <- gamma_left(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_left)
pilot_p_right <- gamma_right(n = calib_res$n,
m = calib_res$m,
t = calib_res$t,
L = L_right)
calib_res$pilot_p_left <- pilot_p_left
calib_res$pass_qc_left <- pilot_p_left < 0.005
calib_res$pilot_p_right <- pilot_p_right
calib_res$pass_qc_right <- pilot_p_right < 0.005
to_plot <- calib_res |> pivot_longer(cols = c("pass_qc_left", "pass_qc_right"),
names_to = "side", values_to = "pass_qc_pois")
p <- ggplot(data = to_plot, mapping = aes(x = n, y = t, col = pass_qc_pois)) +
facet_grid(. ~ side) +
geom_point() +
theme_bw() +
xlab("N treatment cells") +
ylab("Total gene expression") +
scale_y_log10() +
theme(legend.position = "bottom")
plot(p)
plot_run_calibration_check(sceptre_object)
